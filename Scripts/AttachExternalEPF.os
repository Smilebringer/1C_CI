#Использовать v8runner
#Использовать tempfiles
// #Использовать "../vendor/oscript-library/src/logos"

Перем Лог;
Перем Соединение;
Перем КодВозврата;

Процедура Инициализация()

	Лог = Логирование.ПолучитьЛог("oscript.app.AttachExternalEPF");
	Лог.УстановитьРаскладку(ЭтотОбъект);
	
	КодВозврата = 0;
	
КонецПроцедуры

Функция Форматировать(Знач Уровень, Знач Сообщение) Экспорт

    Возврат СтрШаблон("%1: %2 - %3", ТекущаяДата(), УровниЛога.НаименованиеУровня(Уровень), Сообщение);

КонецФункции

Процедура ВывестиГоризонтальнуюЧерту()

	Лог.Информация("------------------------------------------");

КонецПроцедуры

Процедура ЗагрузитьВнешниеОтчетыИОбработки()

	Если КодВозврата > 0 Тогда
		Возврат;
	КонецЕсли;

	ПутьКОбработкам = "\\ru-s-mosc-da03\_Temp1C\_ERP\_Обработки\Продуктив";

	СтрокаСоединения = ПолучитьСтрокуСоединенияКБазе();
	V83COMConnector = Новый COMОбъект("V83.COMConnector");
	Попытка
		Соединение = V83COMConnector.Connect(СтрокаСоединения);
	Исключение
		Лог.Ошибка("Не удалось подключиться к базе-приемнику для обновления обработок");
		Лог.Ошибка(ОписаниеОшибки());
		КодВозврата = 4;
		Возврат;
	КонецПопытки;

	Соединение.НачатьТранзакцию();

	КаталогОбработок = ОбъединитьПути(ТекущийКаталог(), ПутьКОбработкам);
	ЗагрузитьКаталогОбработокВБазу(КаталогОбработок);

	Соединение.ЗафиксироватьТранзакцию();

	ВывестиГоризонтальнуюЧерту();
	Лог.Информация("Обновление обработок в базе завершено.");

КонецПроцедуры

Процедура ЗагрузитьКаталогОбработокВБазу(Знач КаталогОбработок)

	Лог.Отладка("Поиск обработок в каталоге: %1", КаталогОбработок);

	Файлы = НайтиФайлы(КаталогОбработок, ПолучитьМаскуВсеФайлы());

	Для Каждого Файл Из Файлы Цикл

		Если Файл.ЭтоКаталог() Тогда
			ЗагрузитьКаталогОбработокВБазу(Файл.ПолноеИмя);
		ИначеЕсли ЭтоФайлОтчетаИлиОбработки(Файл) И ЭтоПодключаемаяОбработка(Файл) Тогда
			Попытка
				ЗагрузитьОбработкуВБазу(Файл.ПолноеИмя);
			Исключение
				ВывестиГоризонтальнуюЧерту();
				Лог.Ошибка("Ошибка загрузки обработок, откат изменений");
				ВызватьИсключение ОписаниеОшибки();
			КонецПопытки;
		КонецЕсли;

	КонецЦикла

КонецПроцедуры


Процедура ЗагрузитьОбработкуВБазу(ИмяФайла)

	Лог.Информация("Загрузка обработки <" + ИмяФайла + ">");

	ПараметрыРегистрации = Соединение.NewObject("Структура");
	ПараметрыРегистрации.Вставить("ИмяФайла", "");
	ПараметрыРегистрации.Вставить("ЭтоОтчет", Неопределено);
	ПараметрыРегистрации.Вставить("ОтключатьКонфликтующие", Ложь);
	ПараметрыРегистрации.Вставить("Конфликтующие",  Соединение.NewObject("СписокЗначений"));
	ПараметрыРегистрации.Вставить("АдресДанныхОбработки", "");
	ПараметрыРегистрации.Вставить("ОтключатьПубликацию", Ложь);

	ДД = Соединение.NewObject("ДвоичныеДанные", ИмяФайла);
	АдресДанныхОбработки = Соединение.ПоместитьВоВременноеХранилище(ДД, Соединение.NewObject("УникальныйИдентификатор"));
	ПараметрыРегистрации.АдресДанныхОбработки = АдресДанныхОбработки;

	ФайлОбработки = Новый Файл(ИмяФайла);
	ПараметрыРегистрации.ИмяФайла = ФайлОбработки.Имя;

	РасширениеФайла = ВРег(ФайлОбработки.Расширение);
	Если РасширениеФайла = ".ERF" Тогда
		ПараметрыРегистрации.ЭтоОтчет = Истина;
	ИначеЕсли РасширениеФайла = ".EPF" Тогда
		ПараметрыРегистрации.ЭтоОтчет = Ложь;
	Иначе
		ВызватьИсключение("Расширение файла не соответствует расширению внешнего отчета (ERF) или обработки (EPF): " + РасширениеФайла);
		Возврат;
	КонецЕсли;

	// Вызов сервера
	РезультатРегистрации = ЗарегистрироватьОбработку(ПараметрыРегистрации);

	// Обработка результата работы сервера
	Если РезультатРегистрации.Успех Тогда

		РезультатРегистрации.ОбъектСправочника.ХранилищеОбработки = Соединение.NewObject("ХранилищеЗначения" , ДД, Соединение.NewObject("СжатиеДанных", 9));

		РезультатРегистрации.ОбъектСправочника.Записать();
		Лог.Информация("Обработка <" + ПараметрыРегистрации.ИмяФайла + "> успешно загружена");
		Возврат;

	Иначе
		Лог.Ошибка("Не удалось зарегистировать обработку: %1", РезультатРегистрации.ТекстОшибки);
	КонецЕсли;

	// Разбор причины отказа загрузки обработки и отображение информации пользователю
	Если РезультатРегистрации.ИмяОбъектаЗанято = Ложь Тогда

		// Причина отказа в КраткоеПредставлениеОшибки
		ВызватьИсключение(РезультатРегистрации.КраткоеПредставлениеОшибки);

	Иначе

		// Представление занявших объектов
		КоличествоКонфликтующих = РезультатРегистрации.Конфликтующие.Количество();
		ПредставлениеЗанявших = "";
		Для Каждого ЭлементСписка Из РезультатРегистрации.Конфликтующие Цикл
			ПредставлениеЗанявших = ПредставлениеЗанявших
			+ ?(ПредставлениеЗанявших = "", "", ", ")
			+ СокрЛП(ЭлементСписка.Представление);
			Если СтрДлина(ПредставлениеЗанявших) > 80 Тогда
				ПредставлениеЗанявших = Лев(ПредставлениеЗанявших, 70)
				+ "... ("
				+ Формат(КоличествоКонфликтующих, "ЧН=0; ЧГ=")
				+ " "
				+ Соединение.НСтр("ru = 'шт'")
				+ ")";
				Прервать;
			КонецЕсли;
		КонецЦикла;

		ТекстВопроса = СтрШаблон(
			Соединение.НСтр("ru = 'Имя ""%1"" уже занято другими дополнительными отчетами (обработками):
				|%2.'"),
			РезультатРегистрации.ИмяОбъекта,
			ПредставлениеЗанявших
		);

	КонецЕсли;

	// Отменить загрузку
	ВызватьИсключение("Не удалось записать обработку <" + ИмяФайла + ">");

КонецПроцедуры

Функция ЗарегистрироватьОбработку(ПараметрыРегистрации)

	СсылкаСправочника = Соединение.Справочники.ДополнительныеОтчетыИОбработки.НайтиПоРеквизиту("ИмяФайла", ПараметрыРегистрации.ИмяФайла);
	Если СсылкаСправочника.Пустая() Тогда
		Лог.Информация("Обработка <" + ПараметрыРегистрации.ИмяФайла + "> не найдена, создаем элемент");
		ОбъектСправочника = Соединение.Справочники.ДополнительныеОтчетыИОбработки.СоздатьЭлемент();
		ОбъектСправочника.Заполнить(Неопределено);
		ОбъектСправочника.ИспользоватьДляФормыОбъекта = Истина;
		ОбъектСправочника.ИспользоватьДляФормыСписка  = Истина;
	Иначе
		Лог.Информация("Обработка <" + ПараметрыРегистрации.ИмяФайла + "> найдена в базе. Используем существующий элемент");
		ОбъектСправочника = СсылкаСправочника.ПолучитьОбъект();
	КонецЕсли;

	Результат = Соединение.ДополнительныеОтчетыИОбработки.ЗарегистрироватьОбработку(ОбъектСправочника, ПараметрыРегистрации);
	АдресРазрешений = Соединение.ПоместитьВоВременноеХранилище(ОбъектСправочника.Разрешения.Выгрузить());

	Результат.Вставить("ОбъектСправочника", ОбъектСправочника);

	Возврат Результат;

КонецФункции

Функция ЭтоФайлОтчетаИлиОбработки(Знач Файл)

	РасширениеФайла = ВРег(Файл.Расширение);
	ОбработкаНайдена = ВРег(РасширениеФайла) = ".EPF" ИЛИ Врег(РасширениеФайла) = ".ERF";

	Если ОбработкаНайдена Тогда
		Лог.Отладка("Найдена обработка: %1", Файл.Имя);
	КонецЕсли;	

	Возврат ОбработкаНайдена;

КонецФункции

Функция ЭтоПодключаемаяОбработка(Знач Файл)

	Результат = Ложь;
	Попытка
		Если Прав(Файл.ПолноеИмя, 3) = "epf" Тогда
			ОбработкаОбъект = Соединение.ВнешниеОбработки.Создать(Файл.ПолноеИмя, Ложь);
		Иначе
			ОбработкаОбъект = Соединение.ВнешниеОтчеты.Создать(Файл.ПолноеИмя, Ложь);
		КонецЕсли;
		Сведения = ОбработкаОбъект.СведенияОВнешнейОбработке();
		Если Сведения<>Неопределено Тогда
			Результат = Истина;
		КонецЕсли;	
	Исключение
		Лог.Отладка("Это не подключаемая обработка (%1), описание ошибка: %2", Файл.Имя, ОписаниеОшибки());
	КонецПопытки;

	Возврат Результат;

КонецФункции

Функция ЭтоПутьКИсходнымКодамОбработок(ПутьКПапке)

	ФайлПереименования = Новый Файл(ОбъединитьПути(ПутьКПапке, "renames.txt"));
	Возврат ФайлПереименования.Существует();

КонецФункции

Функция ПолучитьСтрокуИзмененныхФайлов(Знач ОтборПоНачалуСтроки = "")

	ТекущийКаталог = ТекущийКаталог();

	КоманднаяСтрока = "git diff --name-only HEAD^ HEAD";

	Процесс = СоздатьПроцесс(КоманднаяСтрока, ТекущийКаталог, Истина, , КодировкаТекста.UTF8);
	Процесс.Запустить();

	Процесс.ОжидатьЗавершения();

	СтрокаИзмененныхФайлов = "";
	Пока Процесс.ПотокВывода.ЕстьДанные Цикл

		СтрокаВывода = Процесс.ПотокВывода.ПрочитатьСтроку();
		Если НЕ ЗначениеЗаполнено(ОтборПоНачалуСтроки) ИЛИ СтрНачинаетсяС(СтрокаВывода, ОтборПоНачалуСтроки) Тогда
			ТекущаяСтрока = ОбъединитьПути(ТекущийКаталог, СтрокаВывода);
			ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока, "/", ПолучитьРазделительПути());
			СтрокаИзмененныхФайлов = СтрокаИзмененныхФайлов + ТекущаяСтрока + ",";
		КонецЕсли;

	КонецЦикла;

	Если ЗначениеЗаполнено(СтрокаИзмененныхФайлов) Тогда
		СтрокаИзмененныхФайлов = Лев(СтрокаИзмененныхФайлов, СтрДлина(СтрокаИзмененныхФайлов) - 1);
	КонецЕсли;

	Возврат СтрокаИзмененныхФайлов;

КонецФункции

Функция ПолучитьПараметрыПодключенияКБазе()

	СтруктураПодключения = Новый Структура;

	СистемнаяИнформация = Новый СистемнаяИнформация;

	УстановитьПеременнуюСреды("SERVER_1C", "RU-S-MOSC-DA03");
	УстановитьПеременнуюСреды("SERVER_REF", "erp2_al");
	УстановитьПеременнуюСреды("1C_USERNAME", "Администратор");
	УстановитьПеременнуюСреды("1C_PASSWORD", "sapphire730");

	Сервер 			= ПолучитьПеременнуюСреды("SERVER_1C");
	База 			= ПолучитьПеременнуюСреды("SERVER_REF");
	Пользователь 	= ПолучитьПеременнуюСреды("1C_USERNAME");
	Пароль 			= ПолучитьПеременнуюСреды("1C_PASSWORD");

	СтруктураПодключения.Вставить("Сервер", 		Сервер);
	СтруктураПодключения.Вставить("База", 			База);
	СтруктураПодключения.Вставить("Пользователь", 	Пользователь);
	СтруктураПодключения.Вставить("Пароль", 		Пароль);

	Возврат СтруктураПодключения;

КонецФункции

Процедура УстановитьКонтекстКонфигуратора(УправлениеКонфигуратором)

	Параметры = ПолучитьПараметрыПодключенияКБазе();

	СтрокаСоединения = "/IBConnectionString""File=""C:\Users\mikhail.chernyshev\Documents\1C\Bases\ERP dev"";""";
	СтрокаСоединения = СтрШаблон(СтрокаСоединения, Параметры.Сервер, Параметры.База);

	УправлениеКонфигуратором.УстановитьКонтекст(СтрокаСоединения, Параметры.Пользователь, Параметры.Пароль);

КонецПроцедуры

Функция ПолучитьСтрокуСоединенияКБазе()

	Параметры = ПолучитьПараметрыПодключенияКБазе();

	СтрокаСоединения = "Srvr=%1;Ref=%2;Usr=%3;Pwd=%4;";
	СтрокаСоединения = СтрШаблон(СтрокаСоединения, Параметры.Сервер, Параметры.База, Параметры.Пользователь, Параметры.Пароль);

	//СтрокаСоединения = "File=""C:\Users\mikhail.chernyshev\Documents\1C\Bases\ERP dev"";";

	Возврат СтрокаСоединения;

КонецФункции

Инициализация();
ЗагрузитьВнешниеОтчетыИОбработки();
ВременныеФайлы.Удалить();